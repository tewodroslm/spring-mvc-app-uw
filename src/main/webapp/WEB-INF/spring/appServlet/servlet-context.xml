<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:p="http://www.springframework.org/schema/p"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:util="http://www.springframework.org/schema/util"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">

    <!--  Provides Entity's validation service. The validator attribute is explicitly defined to reference
          the validator bean we defined.-->
    <annotation-driven validator="validator"/>


    <resources location="/" mapping="/resources/**"/>

    <!-- Enables the mapping of the DispatcherServlet to the web application’s root context URL,
        while still allowing static resource requests to be handled by the container’s default servlet.
        The default servlet is the Tomcat provided servlet which serves static resources.
     -->
    <default-servlet-handler/>

    <!-- For tiles support we need to to replace the InternalResourceViewResolver
        with the UrlBasedViewResolver class -->
    <beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver"
                id="tilesViewResolver">
        <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
    </beans:bean>

    <beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer" id="tilesConfigurer">
        <beans:property name="definitions">
            <beans:list>
                <beans:value>/WEB-INF/layouts/layouts.xml</beans:value>
                <beans:value>/WEB-INF/views/**/views.xml</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>

    <context:component-scan base-package="edu.hes.e57.springmvcwebapp1.web" />

    <interceptors>
        <!-- This class intercepts every request for changing the theme. -->
        <beans:bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor"/>

        <!-- Intercepts all the requests to the DispatcherServlet. The interceptor supports locale
            switching with a configurable request parameter. From the interceptor configuration,
            the URL param with the name lang is defined for changing the locale for the application.
         -->
        <beans:bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"
                    p:paramName="lang"/>
    </interceptors>

    <!-- This bean's class implements the MessageSource interface, which loads the messages from the defined files
         (in this case, it’s the messages*.properties and application*.properties in the /WEB-INF/i18n
         folder) in supporting i18n.
         Fall back to the locale of the system that the application is running on when a special resource
         bundle for the client locale isn’t found.
     -->
    <beans:bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
                id="messageSource" p:basenames="WEB-INF/i18n/messages,WEB-INF/i18n/application"
                p:fallbackToSystemLocale="false"/>

    <!-- This class supports the storage and retrieval of locale settings from the user browser’s cookie.-->
    <beans:bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
                id="localeResolver" p:cookieName="locale"/>

    <!-- Loads the ResourceBundle of the active theme. For example, if the active theme is called standard,
        the bean will look for the file standard.properties as the ResourceBundle of the theme-->
    <beans:bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" id="themeSource"/>

    <!-- Resolve the active theme for users. The property defaultThemeName defines the default theme to use,
        which is the standard theme. The class uses cookies to store the theme for the user.
     -->
    <beans:bean class="org.springframework.web.servlet.theme.CookieThemeResolver"
                id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard"/>

    <!-- Validator bean is defined, with the class LocalValidatorFactoryBean, for JSR-349 support.
        Note that we set the validationMessageSource property to reference the messageSource bean defined,
        which instructs the JSR-349 validator to look up the messages by the codes from the
        messageSource bean.  -->
    <beans:bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <beans:property name="validationMessageSource" ref="messageSource"/>
    </beans:bean>

    <beans:bean
            class="org.springframework.web.multipart.support.StandardServletMultipartResolver"
            id="multipartResolver"/>


    <!-- Defines basic MVC defaults (handler adapter, mapping, date formatting, etc) -->
<!--    <annotation-driven conversion-service="typeConversionService" validator="validator"/>-->

    <view-controller path="/" view-name="books"/>
</beans:beans>
